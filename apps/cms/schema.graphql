# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Action {
  id: ID!
  title: String!
  slug: String!
  keywords: String!
  resume: String!
  content: Action_content_Document!
  image: ImageFieldOutput!
  date: CalendarDay!
  publishedAt: DateTime
  status: ActionStatusType!
}

type Action_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum ActionStatusType {
  published
  draft
}

input ActionWhereUniqueInput {
  id: ID
  slug: String
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  keywords: StringFilter
  resume: StringFilter
  date: CalendarDayFilter
  publishedAt: DateTimeNullableFilter
  status: ActionStatusTypeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ActionStatusTypeNullableFilter {
  equals: ActionStatusType
  in: [ActionStatusType!]
  notIn: [ActionStatusType!]
  not: ActionStatusTypeNullableFilter
}

input ActionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  keywords: OrderDirection
  resume: OrderDirection
  date: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ActionUpdateInput {
  title: String
  slug: String
  keywords: String
  resume: String
  content: JSON
  image: ImageFieldInput
  date: CalendarDay
  publishedAt: DateTime
  status: ActionStatusType
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ActionUpdateArgs {
  where: ActionWhereUniqueInput!
  data: ActionUpdateInput!
}

input ActionCreateInput {
  title: String
  slug: String
  keywords: String
  resume: String
  content: JSON
  image: ImageFieldInput
  date: CalendarDay
  publishedAt: DateTime
  status: ActionStatusType
}

type Company {
  id: ID!
  title: String!
  address: String!
  phone: String!
  email: String!
  facebookUrl: String!
  instagramUrl: String!
  youtubeUrl: String!
}

input CompanyWhereUniqueInput {
  id: ID
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  title: StringFilter
  address: StringFilter
  phone: StringFilter
  email: StringFilter
  facebookUrl: StringFilter
  instagramUrl: StringFilter
  youtubeUrl: StringFilter
}

input CompanyOrderByInput {
  id: OrderDirection
  title: OrderDirection
  address: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  facebookUrl: OrderDirection
  instagramUrl: OrderDirection
  youtubeUrl: OrderDirection
}

input CompanyUpdateInput {
  title: String
  address: String
  phone: String
  email: String
  facebookUrl: String
  instagramUrl: String
  youtubeUrl: String
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput! = {id: 1}
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  title: String
  address: String
  phone: String
  email: String
  facebookUrl: String
  instagramUrl: String
  youtubeUrl: String
}

type Event {
  id: ID!
  title: String!
  slug: String!
  keywords: String!
  resume: String!
  content: Event_content_Document!
  image: ImageFieldOutput!
  link: String!
  workload: Int!
  date: CalendarDay!
  locale: String!
  publishedAt: DateTime
  status: EventStatusType!
}

type Event_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum EventStatusType {
  published
  draft
}

input EventWhereUniqueInput {
  id: ID
  slug: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  keywords: StringFilter
  resume: StringFilter
  link: StringFilter
  workload: IntFilter
  date: CalendarDayFilter
  locale: StringFilter
  publishedAt: DateTimeNullableFilter
  status: EventStatusTypeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input EventStatusTypeNullableFilter {
  equals: EventStatusType
  in: [EventStatusType!]
  notIn: [EventStatusType!]
  not: EventStatusTypeNullableFilter
}

input EventOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  keywords: OrderDirection
  resume: OrderDirection
  link: OrderDirection
  workload: OrderDirection
  date: OrderDirection
  locale: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input EventUpdateInput {
  title: String
  slug: String
  keywords: String
  resume: String
  content: JSON
  image: ImageFieldInput
  link: String
  workload: Int
  date: CalendarDay
  locale: String
  publishedAt: DateTime
  status: EventStatusType
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  title: String
  slug: String
  keywords: String
  resume: String
  content: JSON
  image: ImageFieldInput
  link: String
  workload: Int
  date: CalendarDay
  locale: String
  publishedAt: DateTime
  status: EventStatusType
}

type History {
  id: ID!
  titleOne: String!
  contentOne: String!
  titleTwo: String!
  contentTwo: String!
  titleThree: String!
  contentThree: String!
  titleFour: String!
  contentFour: String!
  titleFive: String!
  contentFive: String!
}

input HistoryWhereUniqueInput {
  id: ID
}

input HistoryWhereInput {
  AND: [HistoryWhereInput!]
  OR: [HistoryWhereInput!]
  NOT: [HistoryWhereInput!]
  id: IDFilter
  titleOne: StringFilter
  contentOne: StringFilter
  titleTwo: StringFilter
  contentTwo: StringFilter
  titleThree: StringFilter
  contentThree: StringFilter
  titleFour: StringFilter
  contentFour: StringFilter
  titleFive: StringFilter
  contentFive: StringFilter
}

input HistoryOrderByInput {
  id: OrderDirection
  titleOne: OrderDirection
  contentOne: OrderDirection
  titleTwo: OrderDirection
  contentTwo: OrderDirection
  titleThree: OrderDirection
  contentThree: OrderDirection
  titleFour: OrderDirection
  contentFour: OrderDirection
  titleFive: OrderDirection
  contentFive: OrderDirection
}

input HistoryUpdateInput {
  titleOne: String
  contentOne: String
  titleTwo: String
  contentTwo: String
  titleThree: String
  contentThree: String
  titleFour: String
  contentFour: String
  titleFive: String
  contentFive: String
}

input HistoryUpdateArgs {
  where: HistoryWhereUniqueInput! = {id: 1}
  data: HistoryUpdateInput!
}

input HistoryCreateInput {
  titleOne: String
  contentOne: String
  titleTwo: String
  contentTwo: String
  titleThree: String
  contentThree: String
  titleFour: String
  contentFour: String
  titleFive: String
  contentFive: String
}

type HomeSection {
  id: ID!
  title: String!
  content: String!
  image: ImageFieldOutput!
}

input HomeSectionWhereUniqueInput {
  id: ID
}

input HomeSectionWhereInput {
  AND: [HomeSectionWhereInput!]
  OR: [HomeSectionWhereInput!]
  NOT: [HomeSectionWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input HomeSectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input HomeSectionUpdateInput {
  title: String
  content: String
  image: ImageFieldInput
}

input HomeSectionUpdateArgs {
  where: HomeSectionWhereUniqueInput! = {id: 1}
  data: HomeSectionUpdateInput!
}

input HomeSectionCreateInput {
  title: String
  content: String
  image: ImageFieldInput
}

type NewsletterList {
  id: ID!
  email: String
  publishedAt: DateTime
}

input NewsletterListWhereUniqueInput {
  id: ID
  email: String
}

input NewsletterListWhereInput {
  AND: [NewsletterListWhereInput!]
  OR: [NewsletterListWhereInput!]
  NOT: [NewsletterListWhereInput!]
  id: IDFilter
  email: StringFilter
  publishedAt: DateTimeNullableFilter
}

input NewsletterListOrderByInput {
  id: OrderDirection
  email: OrderDirection
  publishedAt: OrderDirection
}

input NewsletterListUpdateInput {
  email: String
  publishedAt: DateTime
}

input NewsletterListUpdateArgs {
  where: NewsletterListWhereUniqueInput!
  data: NewsletterListUpdateInput!
}

input NewsletterListCreateInput {
  email: String
  publishedAt: DateTime
}

type Project {
  id: ID!
  title: String!
  slug: String!
  keywords: String!
  content: Project_content_Document!
  image: ImageFieldOutput!
  link: String!
  startDate: CalendarDay!
  endDate: CalendarDay!
  researchers(where: ResearcherWhereInput! = {}, orderBy: [ResearcherOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearcherWhereUniqueInput): [Researcher!]
  researchersCount(where: ResearcherWhereInput! = {}): Int
  researchArea: ResearchArea
  publishedAt: DateTime
  status: ProjectStatusType!
}

type Project_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum ProjectStatusType {
  published
  draft
}

input ProjectWhereUniqueInput {
  id: ID
  slug: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  keywords: StringFilter
  link: StringFilter
  startDate: CalendarDayFilter
  endDate: CalendarDayFilter
  researchers: ResearcherManyRelationFilter
  researchArea: ResearchAreaWhereInput
  publishedAt: DateTimeNullableFilter
  status: ProjectStatusTypeNullableFilter
}

input ResearcherManyRelationFilter {
  every: ResearcherWhereInput
  some: ResearcherWhereInput
  none: ResearcherWhereInput
}

input ProjectStatusTypeNullableFilter {
  equals: ProjectStatusType
  in: [ProjectStatusType!]
  notIn: [ProjectStatusType!]
  not: ProjectStatusTypeNullableFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  keywords: OrderDirection
  link: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input ProjectUpdateInput {
  title: String
  slug: String
  keywords: String
  content: JSON
  image: ImageFieldInput
  link: String
  startDate: CalendarDay
  endDate: CalendarDay
  researchers: ResearcherRelateToManyForUpdateInput
  researchArea: ResearchAreaRelateToOneForUpdateInput
  publishedAt: DateTime
  status: ProjectStatusType
}

input ResearcherRelateToManyForUpdateInput {
  disconnect: [ResearcherWhereUniqueInput!]
  set: [ResearcherWhereUniqueInput!]
  create: [ResearcherCreateInput!]
  connect: [ResearcherWhereUniqueInput!]
}

input ResearchAreaRelateToOneForUpdateInput {
  create: ResearchAreaCreateInput
  connect: ResearchAreaWhereUniqueInput
  disconnect: Boolean
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  title: String
  slug: String
  keywords: String
  content: JSON
  image: ImageFieldInput
  link: String
  startDate: CalendarDay
  endDate: CalendarDay
  researchers: ResearcherRelateToManyForCreateInput
  researchArea: ResearchAreaRelateToOneForCreateInput
  publishedAt: DateTime
  status: ProjectStatusType
}

input ResearcherRelateToManyForCreateInput {
  create: [ResearcherCreateInput!]
  connect: [ResearcherWhereUniqueInput!]
}

input ResearchAreaRelateToOneForCreateInput {
  create: ResearchAreaCreateInput
  connect: ResearchAreaWhereUniqueInput
}

type Publication {
  id: ID!
  title: String!
  slug: String!
  keywords: String!
  resume: String!
  content: Publication_content_Document!
  link: String!
  date: CalendarDay!
  researchers(where: ResearcherWhereInput! = {}, orderBy: [ResearcherOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearcherWhereUniqueInput): [Researcher!]
  researchersCount(where: ResearcherWhereInput! = {}): Int
  researchArea: ResearchArea
  magazine: String!
  doi: String!
  license: String!
  publishedAt: DateTime
  status: PublicationStatusType!
}

type Publication_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum PublicationStatusType {
  published
  draft
}

input PublicationWhereUniqueInput {
  id: ID
  slug: String
}

input PublicationWhereInput {
  AND: [PublicationWhereInput!]
  OR: [PublicationWhereInput!]
  NOT: [PublicationWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  keywords: StringFilter
  resume: StringFilter
  link: StringFilter
  date: CalendarDayFilter
  researchers: ResearcherManyRelationFilter
  researchArea: ResearchAreaWhereInput
  magazine: StringFilter
  doi: StringFilter
  license: StringFilter
  publishedAt: DateTimeNullableFilter
  status: PublicationStatusTypeNullableFilter
}

input PublicationStatusTypeNullableFilter {
  equals: PublicationStatusType
  in: [PublicationStatusType!]
  notIn: [PublicationStatusType!]
  not: PublicationStatusTypeNullableFilter
}

input PublicationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  keywords: OrderDirection
  resume: OrderDirection
  link: OrderDirection
  date: OrderDirection
  magazine: OrderDirection
  doi: OrderDirection
  license: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input PublicationUpdateInput {
  title: String
  slug: String
  keywords: String
  resume: String
  content: JSON
  link: String
  date: CalendarDay
  researchers: ResearcherRelateToManyForUpdateInput
  researchArea: ResearchAreaRelateToOneForUpdateInput
  magazine: String
  doi: String
  license: String
  publishedAt: DateTime
  status: PublicationStatusType
}

input PublicationUpdateArgs {
  where: PublicationWhereUniqueInput!
  data: PublicationUpdateInput!
}

input PublicationCreateInput {
  title: String
  slug: String
  keywords: String
  resume: String
  content: JSON
  link: String
  date: CalendarDay
  researchers: ResearcherRelateToManyForCreateInput
  researchArea: ResearchAreaRelateToOneForCreateInput
  magazine: String
  doi: String
  license: String
  publishedAt: DateTime
  status: PublicationStatusType
}

type ResearchArea {
  id: ID!
  title: String!
  resume: String!
  content: ResearchArea_content_Document!
  image: ImageFieldOutput!
  icon: ImageFieldOutput!
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  publications(where: PublicationWhereInput! = {}, orderBy: [PublicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicationWhereUniqueInput): [Publication!]
  publicationsCount(where: PublicationWhereInput! = {}): Int
  publishedAt: DateTime
  status: ResearchAreaStatusType!
}

type ResearchArea_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum ResearchAreaStatusType {
  published
  draft
}

input ResearchAreaWhereUniqueInput {
  id: ID
}

input ResearchAreaWhereInput {
  AND: [ResearchAreaWhereInput!]
  OR: [ResearchAreaWhereInput!]
  NOT: [ResearchAreaWhereInput!]
  id: IDFilter
  title: StringFilter
  resume: StringFilter
  projects: ProjectManyRelationFilter
  publications: PublicationManyRelationFilter
  publishedAt: DateTimeNullableFilter
  status: ResearchAreaStatusTypeNullableFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input PublicationManyRelationFilter {
  every: PublicationWhereInput
  some: PublicationWhereInput
  none: PublicationWhereInput
}

input ResearchAreaStatusTypeNullableFilter {
  equals: ResearchAreaStatusType
  in: [ResearchAreaStatusType!]
  notIn: [ResearchAreaStatusType!]
  not: ResearchAreaStatusTypeNullableFilter
}

input ResearchAreaOrderByInput {
  id: OrderDirection
  title: OrderDirection
  resume: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input ResearchAreaUpdateInput {
  title: String
  resume: String
  content: JSON
  image: ImageFieldInput
  icon: ImageFieldInput
  projects: ProjectRelateToManyForUpdateInput
  publications: PublicationRelateToManyForUpdateInput
  publishedAt: DateTime
  status: ResearchAreaStatusType
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input PublicationRelateToManyForUpdateInput {
  disconnect: [PublicationWhereUniqueInput!]
  set: [PublicationWhereUniqueInput!]
  create: [PublicationCreateInput!]
  connect: [PublicationWhereUniqueInput!]
}

input ResearchAreaUpdateArgs {
  where: ResearchAreaWhereUniqueInput!
  data: ResearchAreaUpdateInput!
}

input ResearchAreaCreateInput {
  title: String
  resume: String
  content: JSON
  image: ImageFieldInput
  icon: ImageFieldInput
  projects: ProjectRelateToManyForCreateInput
  publications: PublicationRelateToManyForCreateInput
  publishedAt: DateTime
  status: ResearchAreaStatusType
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input PublicationRelateToManyForCreateInput {
  create: [PublicationCreateInput!]
  connect: [PublicationWhereUniqueInput!]
}

type Researcher {
  id: ID!
  name: String!
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  publications(where: PublicationWhereInput! = {}, orderBy: [PublicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicationWhereUniqueInput): [Publication!]
  publicationsCount(where: PublicationWhereInput! = {}): Int
  publishedAt: DateTime
  status: ResearcherStatusType!
}

enum ResearcherStatusType {
  published
  draft
}

input ResearcherWhereUniqueInput {
  id: ID
}

input ResearcherWhereInput {
  AND: [ResearcherWhereInput!]
  OR: [ResearcherWhereInput!]
  NOT: [ResearcherWhereInput!]
  id: IDFilter
  name: StringFilter
  projects: ProjectManyRelationFilter
  publications: PublicationManyRelationFilter
  publishedAt: DateTimeNullableFilter
  status: ResearcherStatusTypeNullableFilter
}

input ResearcherStatusTypeNullableFilter {
  equals: ResearcherStatusType
  in: [ResearcherStatusType!]
  notIn: [ResearcherStatusType!]
  not: ResearcherStatusTypeNullableFilter
}

input ResearcherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input ResearcherUpdateInput {
  name: String
  projects: ProjectRelateToManyForUpdateInput
  publications: PublicationRelateToManyForUpdateInput
  publishedAt: DateTime
  status: ResearcherStatusType
}

input ResearcherUpdateArgs {
  where: ResearcherWhereUniqueInput!
  data: ResearcherUpdateInput!
}

input ResearcherCreateInput {
  name: String
  projects: ProjectRelateToManyForCreateInput
  publications: PublicationRelateToManyForCreateInput
  publishedAt: DateTime
  status: ResearcherStatusType
}

type TeamMember {
  id: ID!
  name: String!
  role: String!
  image: ImageFieldOutput!
  link: String!
  publishedAt: DateTime
  status: TeamMemberStatusType!
}

enum TeamMemberStatusType {
  published
  draft
}

input TeamMemberWhereUniqueInput {
  id: ID
}

input TeamMemberWhereInput {
  AND: [TeamMemberWhereInput!]
  OR: [TeamMemberWhereInput!]
  NOT: [TeamMemberWhereInput!]
  id: IDFilter
  name: StringFilter
  role: StringFilter
  link: StringFilter
  publishedAt: DateTimeNullableFilter
  status: TeamMemberStatusTypeNullableFilter
}

input TeamMemberStatusTypeNullableFilter {
  equals: TeamMemberStatusType
  in: [TeamMemberStatusType!]
  notIn: [TeamMemberStatusType!]
  not: TeamMemberStatusTypeNullableFilter
}

input TeamMemberOrderByInput {
  id: OrderDirection
  name: OrderDirection
  role: OrderDirection
  link: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input TeamMemberUpdateInput {
  name: String
  role: String
  image: ImageFieldInput
  link: String
  publishedAt: DateTime
  status: TeamMemberStatusType
}

input TeamMemberUpdateArgs {
  where: TeamMemberWhereUniqueInput!
  data: TeamMemberUpdateInput!
}

input TeamMemberCreateInput {
  name: String
  role: String
  image: ImageFieldInput
  link: String
  publishedAt: DateTime
  status: TeamMemberStatusType
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  publishedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  publishedAt: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  publishedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  publishedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  publishedAt: DateTime
}

type ResearchSection {
  id: ID!
  title: String!
  content: String!
}

input ResearchSectionWhereUniqueInput {
  id: ID
}

input ResearchSectionWhereInput {
  AND: [ResearchSectionWhereInput!]
  OR: [ResearchSectionWhereInput!]
  NOT: [ResearchSectionWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input ResearchSectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input ResearchSectionUpdateInput {
  title: String
  content: String
}

input ResearchSectionUpdateArgs {
  where: ResearchSectionWhereUniqueInput! = {id: 1}
  data: ResearchSectionUpdateInput!
}

input ResearchSectionCreateInput {
  title: String
  content: String
}

type TeamSection {
  id: ID!
  title: String!
  content: String!
}

input TeamSectionWhereUniqueInput {
  id: ID
}

input TeamSectionWhereInput {
  AND: [TeamSectionWhereInput!]
  OR: [TeamSectionWhereInput!]
  NOT: [TeamSectionWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input TeamSectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input TeamSectionUpdateInput {
  title: String
  content: String
}

input TeamSectionUpdateArgs {
  where: TeamSectionWhereUniqueInput! = {id: 1}
  data: TeamSectionUpdateInput!
}

input TeamSectionCreateInput {
  title: String
  content: String
}

type HistorySection {
  id: ID!
  title: String!
  content: String!
}

input HistorySectionWhereUniqueInput {
  id: ID
}

input HistorySectionWhereInput {
  AND: [HistorySectionWhereInput!]
  OR: [HistorySectionWhereInput!]
  NOT: [HistorySectionWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input HistorySectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input HistorySectionUpdateInput {
  title: String
  content: String
}

input HistorySectionUpdateArgs {
  where: HistorySectionWhereUniqueInput! = {id: 1}
  data: HistorySectionUpdateInput!
}

input HistorySectionCreateInput {
  title: String
  content: String
}

type PublicationsSection {
  id: ID!
  title: String!
  content: String!
}

input PublicationsSectionWhereUniqueInput {
  id: ID
}

input PublicationsSectionWhereInput {
  AND: [PublicationsSectionWhereInput!]
  OR: [PublicationsSectionWhereInput!]
  NOT: [PublicationsSectionWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input PublicationsSectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input PublicationsSectionUpdateInput {
  title: String
  content: String
}

input PublicationsSectionUpdateArgs {
  where: PublicationsSectionWhereUniqueInput! = {id: 1}
  data: PublicationsSectionUpdateInput!
}

input PublicationsSectionCreateInput {
  title: String
  content: String
}

type EventsSection {
  id: ID!
  title: String!
  content: String!
}

input EventsSectionWhereUniqueInput {
  id: ID
}

input EventsSectionWhereInput {
  AND: [EventsSectionWhereInput!]
  OR: [EventsSectionWhereInput!]
  NOT: [EventsSectionWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input EventsSectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input EventsSectionUpdateInput {
  title: String
  content: String
}

input EventsSectionUpdateArgs {
  where: EventsSectionWhereUniqueInput! = {id: 1}
  data: EventsSectionUpdateInput!
}

input EventsSectionCreateInput {
  title: String
  content: String
}

type ActionsSection {
  id: ID!
  title: String!
  content: String!
}

input ActionsSectionWhereUniqueInput {
  id: ID
}

input ActionsSectionWhereInput {
  AND: [ActionsSectionWhereInput!]
  OR: [ActionsSectionWhereInput!]
  NOT: [ActionsSectionWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input ActionsSectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input ActionsSectionUpdateInput {
  title: String
  content: String
}

input ActionsSectionUpdateArgs {
  where: ActionsSectionWhereUniqueInput! = {id: 1}
  data: ActionsSectionUpdateInput!
}

input ActionsSectionCreateInput {
  title: String
  content: String
}

type ProjectsSection {
  id: ID!
  title: String!
  content: String!
}

input ProjectsSectionWhereUniqueInput {
  id: ID
}

input ProjectsSectionWhereInput {
  AND: [ProjectsSectionWhereInput!]
  OR: [ProjectsSectionWhereInput!]
  NOT: [ProjectsSectionWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input ProjectsSectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input ProjectsSectionUpdateInput {
  title: String
  content: String
}

input ProjectsSectionUpdateArgs {
  where: ProjectsSectionWhereUniqueInput! = {id: 1}
  data: ProjectsSectionUpdateInput!
}

input ProjectsSectionCreateInput {
  title: String
  content: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAction(data: ActionCreateInput!): Action
  createActions(data: [ActionCreateInput!]!): [Action]
  updateAction(where: ActionWhereUniqueInput!, data: ActionUpdateInput!): Action
  updateActions(data: [ActionUpdateArgs!]!): [Action]
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteActions(where: [ActionWhereUniqueInput!]!): [Action]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(where: CompanyWhereUniqueInput! = {id: 1}, data: CompanyUpdateInput!): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput! = {id: 1}): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createHistory(data: HistoryCreateInput!): History
  createHistories(data: [HistoryCreateInput!]!): [History]
  updateHistory(where: HistoryWhereUniqueInput! = {id: 1}, data: HistoryUpdateInput!): History
  updateHistories(data: [HistoryUpdateArgs!]!): [History]
  deleteHistory(where: HistoryWhereUniqueInput! = {id: 1}): History
  deleteHistories(where: [HistoryWhereUniqueInput!]!): [History]
  createHomeSection(data: HomeSectionCreateInput!): HomeSection
  createHomeSections(data: [HomeSectionCreateInput!]!): [HomeSection]
  updateHomeSection(where: HomeSectionWhereUniqueInput! = {id: 1}, data: HomeSectionUpdateInput!): HomeSection
  updateHomeSections(data: [HomeSectionUpdateArgs!]!): [HomeSection]
  deleteHomeSection(where: HomeSectionWhereUniqueInput! = {id: 1}): HomeSection
  deleteHomeSections(where: [HomeSectionWhereUniqueInput!]!): [HomeSection]
  createNewsletterList(data: NewsletterListCreateInput!): NewsletterList
  createNewsletterLists(data: [NewsletterListCreateInput!]!): [NewsletterList]
  updateNewsletterList(where: NewsletterListWhereUniqueInput!, data: NewsletterListUpdateInput!): NewsletterList
  updateNewsletterLists(data: [NewsletterListUpdateArgs!]!): [NewsletterList]
  deleteNewsletterList(where: NewsletterListWhereUniqueInput!): NewsletterList
  deleteNewsletterLists(where: [NewsletterListWhereUniqueInput!]!): [NewsletterList]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createPublication(data: PublicationCreateInput!): Publication
  createPublications(data: [PublicationCreateInput!]!): [Publication]
  updatePublication(where: PublicationWhereUniqueInput!, data: PublicationUpdateInput!): Publication
  updatePublications(data: [PublicationUpdateArgs!]!): [Publication]
  deletePublication(where: PublicationWhereUniqueInput!): Publication
  deletePublications(where: [PublicationWhereUniqueInput!]!): [Publication]
  createResearchArea(data: ResearchAreaCreateInput!): ResearchArea
  createResearchAreas(data: [ResearchAreaCreateInput!]!): [ResearchArea]
  updateResearchArea(where: ResearchAreaWhereUniqueInput!, data: ResearchAreaUpdateInput!): ResearchArea
  updateResearchAreas(data: [ResearchAreaUpdateArgs!]!): [ResearchArea]
  deleteResearchArea(where: ResearchAreaWhereUniqueInput!): ResearchArea
  deleteResearchAreas(where: [ResearchAreaWhereUniqueInput!]!): [ResearchArea]
  createResearcher(data: ResearcherCreateInput!): Researcher
  createResearchers(data: [ResearcherCreateInput!]!): [Researcher]
  updateResearcher(where: ResearcherWhereUniqueInput!, data: ResearcherUpdateInput!): Researcher
  updateResearchers(data: [ResearcherUpdateArgs!]!): [Researcher]
  deleteResearcher(where: ResearcherWhereUniqueInput!): Researcher
  deleteResearchers(where: [ResearcherWhereUniqueInput!]!): [Researcher]
  createTeamMember(data: TeamMemberCreateInput!): TeamMember
  createTeamMembers(data: [TeamMemberCreateInput!]!): [TeamMember]
  updateTeamMember(where: TeamMemberWhereUniqueInput!, data: TeamMemberUpdateInput!): TeamMember
  updateTeamMembers(data: [TeamMemberUpdateArgs!]!): [TeamMember]
  deleteTeamMember(where: TeamMemberWhereUniqueInput!): TeamMember
  deleteTeamMembers(where: [TeamMemberWhereUniqueInput!]!): [TeamMember]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createResearchSection(data: ResearchSectionCreateInput!): ResearchSection
  createResearchSections(data: [ResearchSectionCreateInput!]!): [ResearchSection]
  updateResearchSection(where: ResearchSectionWhereUniqueInput! = {id: 1}, data: ResearchSectionUpdateInput!): ResearchSection
  updateResearchSections(data: [ResearchSectionUpdateArgs!]!): [ResearchSection]
  deleteResearchSection(where: ResearchSectionWhereUniqueInput! = {id: 1}): ResearchSection
  deleteResearchSections(where: [ResearchSectionWhereUniqueInput!]!): [ResearchSection]
  createTeamSection(data: TeamSectionCreateInput!): TeamSection
  createTeamSections(data: [TeamSectionCreateInput!]!): [TeamSection]
  updateTeamSection(where: TeamSectionWhereUniqueInput! = {id: 1}, data: TeamSectionUpdateInput!): TeamSection
  updateTeamSections(data: [TeamSectionUpdateArgs!]!): [TeamSection]
  deleteTeamSection(where: TeamSectionWhereUniqueInput! = {id: 1}): TeamSection
  deleteTeamSections(where: [TeamSectionWhereUniqueInput!]!): [TeamSection]
  createHistorySection(data: HistorySectionCreateInput!): HistorySection
  createHistorySections(data: [HistorySectionCreateInput!]!): [HistorySection]
  updateHistorySection(where: HistorySectionWhereUniqueInput! = {id: 1}, data: HistorySectionUpdateInput!): HistorySection
  updateHistorySections(data: [HistorySectionUpdateArgs!]!): [HistorySection]
  deleteHistorySection(where: HistorySectionWhereUniqueInput! = {id: 1}): HistorySection
  deleteHistorySections(where: [HistorySectionWhereUniqueInput!]!): [HistorySection]
  createPublicationsSection(data: PublicationsSectionCreateInput!): PublicationsSection
  createPublicationsSections(data: [PublicationsSectionCreateInput!]!): [PublicationsSection]
  updatePublicationsSection(where: PublicationsSectionWhereUniqueInput! = {id: 1}, data: PublicationsSectionUpdateInput!): PublicationsSection
  updatePublicationsSections(data: [PublicationsSectionUpdateArgs!]!): [PublicationsSection]
  deletePublicationsSection(where: PublicationsSectionWhereUniqueInput! = {id: 1}): PublicationsSection
  deletePublicationsSections(where: [PublicationsSectionWhereUniqueInput!]!): [PublicationsSection]
  createEventsSection(data: EventsSectionCreateInput!): EventsSection
  createEventsSections(data: [EventsSectionCreateInput!]!): [EventsSection]
  updateEventsSection(where: EventsSectionWhereUniqueInput! = {id: 1}, data: EventsSectionUpdateInput!): EventsSection
  updateEventsSections(data: [EventsSectionUpdateArgs!]!): [EventsSection]
  deleteEventsSection(where: EventsSectionWhereUniqueInput! = {id: 1}): EventsSection
  deleteEventsSections(where: [EventsSectionWhereUniqueInput!]!): [EventsSection]
  createActionsSection(data: ActionsSectionCreateInput!): ActionsSection
  createActionsSections(data: [ActionsSectionCreateInput!]!): [ActionsSection]
  updateActionsSection(where: ActionsSectionWhereUniqueInput! = {id: 1}, data: ActionsSectionUpdateInput!): ActionsSection
  updateActionsSections(data: [ActionsSectionUpdateArgs!]!): [ActionsSection]
  deleteActionsSection(where: ActionsSectionWhereUniqueInput! = {id: 1}): ActionsSection
  deleteActionsSections(where: [ActionsSectionWhereUniqueInput!]!): [ActionsSection]
  createProjectsSection(data: ProjectsSectionCreateInput!): ProjectsSection
  createProjectsSections(data: [ProjectsSectionCreateInput!]!): [ProjectsSection]
  updateProjectsSection(where: ProjectsSectionWhereUniqueInput! = {id: 1}, data: ProjectsSectionUpdateInput!): ProjectsSection
  updateProjectsSections(data: [ProjectsSectionUpdateArgs!]!): [ProjectsSection]
  deleteProjectsSection(where: ProjectsSectionWhereUniqueInput! = {id: 1}): ProjectsSection
  deleteProjectsSections(where: [ProjectsSectionWhereUniqueInput!]!): [ProjectsSection]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  action(where: ActionWhereUniqueInput!): Action
  actions(where: ActionWhereInput! = {}, orderBy: [ActionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActionWhereUniqueInput): [Action!]
  actionsCount(where: ActionWhereInput! = {}): Int
  company(where: CompanyWhereUniqueInput! = {id: 1}): Company
  companies(where: CompanyWhereInput! = {id: {equals: 1}}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanyWhereUniqueInput): [Company!]
  companiesCount(where: CompanyWhereInput! = {id: {equals: 1}}): Int
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  history(where: HistoryWhereUniqueInput! = {id: 1}): History
  histories(where: HistoryWhereInput! = {id: {equals: 1}}, orderBy: [HistoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HistoryWhereUniqueInput): [History!]
  historiesCount(where: HistoryWhereInput! = {id: {equals: 1}}): Int
  homeSection(where: HomeSectionWhereUniqueInput! = {id: 1}): HomeSection
  homeSections(where: HomeSectionWhereInput! = {id: {equals: 1}}, orderBy: [HomeSectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomeSectionWhereUniqueInput): [HomeSection!]
  homeSectionsCount(where: HomeSectionWhereInput! = {id: {equals: 1}}): Int
  newsletterList(where: NewsletterListWhereUniqueInput!): NewsletterList
  newsletterLists(where: NewsletterListWhereInput! = {}, orderBy: [NewsletterListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsletterListWhereUniqueInput): [NewsletterList!]
  newsletterListsCount(where: NewsletterListWhereInput! = {}): Int
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  publication(where: PublicationWhereUniqueInput!): Publication
  publications(where: PublicationWhereInput! = {}, orderBy: [PublicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicationWhereUniqueInput): [Publication!]
  publicationsCount(where: PublicationWhereInput! = {}): Int
  researchArea(where: ResearchAreaWhereUniqueInput!): ResearchArea
  researchAreas(where: ResearchAreaWhereInput! = {}, orderBy: [ResearchAreaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearchAreaWhereUniqueInput): [ResearchArea!]
  researchAreasCount(where: ResearchAreaWhereInput! = {}): Int
  researcher(where: ResearcherWhereUniqueInput!): Researcher
  researchers(where: ResearcherWhereInput! = {}, orderBy: [ResearcherOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearcherWhereUniqueInput): [Researcher!]
  researchersCount(where: ResearcherWhereInput! = {}): Int
  teamMember(where: TeamMemberWhereUniqueInput!): TeamMember
  teamMembers(where: TeamMemberWhereInput! = {}, orderBy: [TeamMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TeamMemberWhereUniqueInput): [TeamMember!]
  teamMembersCount(where: TeamMemberWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  researchSection(where: ResearchSectionWhereUniqueInput! = {id: 1}): ResearchSection
  researchSections(where: ResearchSectionWhereInput! = {id: {equals: 1}}, orderBy: [ResearchSectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearchSectionWhereUniqueInput): [ResearchSection!]
  researchSectionsCount(where: ResearchSectionWhereInput! = {id: {equals: 1}}): Int
  teamSection(where: TeamSectionWhereUniqueInput! = {id: 1}): TeamSection
  teamSections(where: TeamSectionWhereInput! = {id: {equals: 1}}, orderBy: [TeamSectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TeamSectionWhereUniqueInput): [TeamSection!]
  teamSectionsCount(where: TeamSectionWhereInput! = {id: {equals: 1}}): Int
  historySection(where: HistorySectionWhereUniqueInput! = {id: 1}): HistorySection
  historySections(where: HistorySectionWhereInput! = {id: {equals: 1}}, orderBy: [HistorySectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HistorySectionWhereUniqueInput): [HistorySection!]
  historySectionsCount(where: HistorySectionWhereInput! = {id: {equals: 1}}): Int
  publicationsSection(where: PublicationsSectionWhereUniqueInput! = {id: 1}): PublicationsSection
  publicationsSections(where: PublicationsSectionWhereInput! = {id: {equals: 1}}, orderBy: [PublicationsSectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicationsSectionWhereUniqueInput): [PublicationsSection!]
  publicationsSectionsCount(where: PublicationsSectionWhereInput! = {id: {equals: 1}}): Int
  eventsSection(where: EventsSectionWhereUniqueInput! = {id: 1}): EventsSection
  eventsSections(where: EventsSectionWhereInput! = {id: {equals: 1}}, orderBy: [EventsSectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventsSectionWhereUniqueInput): [EventsSection!]
  eventsSectionsCount(where: EventsSectionWhereInput! = {id: {equals: 1}}): Int
  actionsSection(where: ActionsSectionWhereUniqueInput! = {id: 1}): ActionsSection
  actionsSections(where: ActionsSectionWhereInput! = {id: {equals: 1}}, orderBy: [ActionsSectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActionsSectionWhereUniqueInput): [ActionsSection!]
  actionsSectionsCount(where: ActionsSectionWhereInput! = {id: {equals: 1}}): Int
  projectsSection(where: ProjectsSectionWhereUniqueInput! = {id: 1}): ProjectsSection
  projectsSections(where: ProjectsSectionWhereInput! = {id: {equals: 1}}, orderBy: [ProjectsSectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectsSectionWhereUniqueInput): [ProjectsSection!]
  projectsSectionsCount(where: ProjectsSectionWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
